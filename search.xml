<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[指标模型运算系统的意义与实现]]></title>
    <url>%2F2018%2F01%2F04%2F2018%2Fmatrix-rule-intro%2F</url>
    <content type="text"><![CDATA[指标模型的概念 关键指标分析是一种常用的业务分析手段 指标可分为基础指标和计算指标 基础指标是指当前业务系统能够直接获取的指标，比如客户评级模型中客户的年龄、学历、性别、总借款次数等等 计算指标是指通过定义计算公式，从其它指标计算得出的指标，比如： 性别得分这个指标的公式为如果 (${性别} == &quot;女&quot;) 60分 否则 40分 基本信息汇总得分这个指标的公式为${性别得分}×20% + ${年龄得分}×20% + ${学历得分}×60% 客户评级最终得分这个指标的公式为${基本信息汇总得分}×30% + ${业务统计信息得分}×40% + ${征信信息得分}×30% 通过上面列举的计算公式可以看出，指标模型的指标之间存在非常复杂的多层依赖关系 性别得分依赖性别 基本信息汇总得分依赖性别得分、年龄得分和学历得分 客户评级最终得分依赖基本信息汇总得分、业务统计信息得分、和征信信息得分 所以，某一业务领域的指标模型包含该业务领域设定的关键指标以及它们之间的计算关系。 文章后半段有系统演示，先聊聊概念和意义 建立指标模型的意义 首先当然是满足当前的指标定义、计算、分析、展现需求（虽然普通的报表系统也能实现指标统计，但指标模型的真正价值在于对持续优化过程的支持和促进） 业务人员对指标的多层计算过程有了一个全面的了解 指标的计算公式能对应需求的具体细节，业务需求不再需要文档来维护，可以直接配置到系统上（解决需求文档和代码脱节的问题） 用领域专用语言（DSL）定义计算公式，普通业务人员也能很好的理解，可以自行维护 通过以上几点，业务人员对需求可进行较好的把控，有利于指标模型的逐步优化完善 通过指标模型的不断演进，模型所对应的业务领域的分析维度逐步清晰，再加上历史数据的积累，这时再以这些指标为基础，去做大数据分析、机器学习就水到渠成了 《三体》的“维度攻击”是近期非常热门的一个概念，新维度的发现需要数据的积累和一个不断试错的过程，而如何让业务、技术人员有目标性的去寻找新的维度，建立逻辑清晰、易配置、可扩展的指标模型是非常必要的手段。 一个指标不一定就是一个有重要意义的维度，但不去建立指标模型、不去测试指标数据，那永远也找不到新的维度。比如假设一批借款数据，其中女性借款人的不良率是0.5%，男性是1.2%，差距非常大；如果没有建立包含性别这个指标的指标模型，就不会想到用指标的思维来分析数据；而更进一步，可能性别+学历、性别+年龄+学历组合计算之后，会有一个更加重要的维度出现，如果不先建立指标模型，这些都难以发现。 缺少传统业务分析积累、缺少业务人员的深度参与、无演进过程的大数据分析系统都将只是花架子。 系统功能模块：指标模型定义 指标模型管理 指标管理（一个模型包括多个指标，指标的依赖限定于同一模型内） 指标计算公式的维护 解析指标计算公式的变量（支持普通、通配符、正则表达式变量），建立指标的依赖关系 指标值、公式的有效性检查 指标依赖死循环的检查 报表定义（每张报表包含多个指标，满足多业务场景的分析需求） 系统功能模块：指标模型运算 运算对象管理（不同模型有不同类型的运算对象，如客户评级模型是客户、股票分析模型是股票、软件代码质量评价模型就是程序员） 运算批次发起（选择运算对象，发起一次指标运算批次） 基础指标录入，录入方式包括： 自动导入 - 系统建设完善、基础指标可从已有业务系统、第三方接口抽取 手工导入 - 无完善信息系统，目前只能通过较人工的方式零散的拿到数据，先手工合并到excel表格，再进行批量导入 直接录入 - 适合基础指标较少的模型，在系统界面逐个录入 基础指标录入值完整性、有效性检查 以上检查通过后，可发起模型运算 运算完成，得到所有计算指标结果 系统功能模块：结果展现 指标关系图，把单个运算对象的所有指标计算结果和多层依赖关系通过关系图的方式展示出来，非常直观的分析了计算过程和结果 模型报表，根据模型定义中设置的报表，集中展示多个运算对象的运算结果，或单个运算对象的多次运算结果 指标对比雷达图，用雷达图同时展示多个运算批次的报表指标值，可针对多对象多批次和单对象多批次的对比分析 系统演示：整体功能菜单 下有大量图片，PC端查看效果更佳 系统演示：指标模型定义指标模型管理 新增 - 增加一个指标模型 克隆 - 复制一个模型及其所有指标，这样可以支持模型的多版本管理，平滑升级 修改 - 修改模型名称和说明 删除选中 - 删除所选模型及其所有指标，以及所有运算批次数据 指标配置 - 基础指标 基础指标是指需要外部导入、录入的原始业务数据 测试值，是用来检查指标计算关系配置是否准确用的 例如这两个指标：户籍认证，户籍认证得分（计算公式为：${户籍认证} == &#39;是&#39; ? 100 : 0）；如果户籍认证的测试值设置的是否，那么户籍认证得分的测试必须设置为0，和计算公式的结果一致 通过配置测试值，可以检查整个指标模型的配置是否正确，所以后面会有检查测试值这个功能 指标配置 - 计算指标 计算公式通过变量来依赖其它指标（变量分为普通、通配符、正则表达式3种，下图1为普通变量，图2为通配符变量） 指标值、公式的有效性检查 检查测试值 - 全部通过，所有公式配置无误，所有测试值都跟计算结果匹配 检查测试值 - 部份测试值跟计算结果不匹配 检查测试值 - 认证信息得分公式配置错误导致计算出错，同时导致所有直接、间接依赖它的指标也无法计算 指标依赖死循环的检查 正确的依赖关系是这样的：客户评级结果依赖审核信息得分依赖年龄得分，年龄得分只依赖年龄这个基础指标 为了测试死循环，让年龄得分依赖客户评级结果 检查测试值 - 提示死循环依赖 报表定义 系统支持自定义报表 根据不同业务视角，可选取部份指标组合成一个报表，进行更有针对性的分析 一个指标对应一个报表列，并支持排序 系统演示：指标模型运算运算对象管理、运算批次发起 先通过右键菜单进行“运算对象”的增删改查操作 然后选择要“发起运算”的对象，可多选 再通过右上角的下拉列表选择运算模型 最后点击“发起运算”按钮进行发起。（如图所示，“个人客户AA、BB、CC”将同时发起“个人客户评级v1.0”模型运算） 同一个“运算对象”可以多次发起运算，得到不同时间点的运算结果，并可以对不同时间点的运行结果进行比较，更加深入的分析单个对象的数据变化过程 基础指标录入 导入步骤 Excel模板演示（每个模型有对应的模板，并且会根据模型指标配置自动生成，不需要单独维护模板） 导入完成，所有指标值有效，可提交运算，提交后系统后台将启动任务，进行所有计算指标的计算 导入完成，部份指标值无效，需完善后才能提交运算 运算状态监控 发起，为初始状态，导入基础指标之后可提交模型运算 运算中，系统后台计算任务正在运行 成功，模型计算完成，可以查看结果 作废，取消的运算批次 系统功能模块：结果展现指标关系图 模型报表 业务统计指标报表配置回顾 业务统计指标报表将实时对应报表定义的配置 关键指标报表 指标对比雷达图多个运算对象的指标数据对比 业务统计指标报表的雷达图 关键指标报表的雷达图 单个运算对象的多次运算数据对比 可用于分析同一个运算对象在不同业务范围的数据，比如可对一个程序员在项目A、项目B、项目C的代码质量进行比较分析 报表 雷达图 附录指标计算公式中的变量类型普通变量 说明：对单个指标的值进行引用 格式：${&lt;指标名&gt;} 样例： ${下单金额} 通配符变量 说明：通过通配符匹配指标名 格式：${xxx*xxx??xxx}，其中*代表任意多个字符，?代表任意单个字符 样例1：${*得分}代表以得分结尾的所有指标 样例2：${??金额}代表总共4字，以金额结尾的指标 正则表达式变量 说明：通过正则表达式匹配指标名 格式：#{&lt;表达式&gt;} 样例：#{0[1-6]月金额}匹配01月金额～06月金额六个指标 备注：需要具备正则表达式知识，可由技术人员协助配置。（正则表达式参考） 部分DSL方法 以下为当前实现的部份DSL方法，系统支持DSL方法的扩展，可根据不同业务领域的特殊要求进行定制 百分比汇总 功能说明：多个指标根据百分比加权求和 参数：一组包含值(value)和占比(percentage)的列表 返回：数值 样例 12345678910/** * 按百分比汇总 * &lt;p&gt;例如 指标A = 百分比汇总([[$&#123;指标1&#125;, 20], [$&#123;指标2&#125;, 80]]) * &lt;p&gt;表示 指标A由指标1和指标2，其中指标1占比20%，指标2占比80% * &lt;p&gt;相当于 指标A = 指标1 * 20% + 指标2 * 80% * &lt;p&gt;需注意：传入的参数列表中，所有的占比(percentage)相加需等于100，否则计算出错没有结果 * * @param valueList 参数1，一组包含值(value)和占比(percentage)的列表 * @return 汇总后的值 */ 条件匹配 功能说明：在匹配项列表找到匹配项，返回对应值 参数：（输入Map，匹配项列表） 返回：任意值 样例 1234567891011/** * 根据输入项和条件进行匹配，计算结果 * @param inputMap 输入项，如：v1:$&#123;金额&#125;, v2: $&#123;数量&#125;* * @param expList 匹配项列表，如： * [['v1 &lt;= 50', 40], * ['v1 &gt; 50 &amp;&amp; v1 &lt;= 150', 60], * ['v1 &gt; 150 &amp;&amp; v1 &lt;= 300', 80], * ['v1 &gt; 300 &amp;&amp; v2 &lt;=100', 90], * ['v1 &gt; 300 &amp;&amp; v2 &gt; 100', 100]] * @return 匹配结果，如果都不匹配返回为空 */ 平均值 功能说明：计算一组数值的平均值 参数：指标列表 返回：数值 样例：平均值([${*得分}]),代表以“得分”结尾的所有指标的平均值 最小值 功能说明：查找一组数值的最小值 参数：指标列表 返回：数值 样例：最小值([${*得分}]) 最大值 功能说明：查找一组数值的最大值 参数：指标列表 返回：数值 样例：最大值([${*得分}]) 总和 功能说明：计算一组数值的和 参数：指标列表 返回：数值 样例：总和([${*得分}]) 标准差 功能说明：计算一组数值的标准差 参数：指标列表 返回：数值 样例：标准差([${指标1},${指标2},${下单??}]) 匹配左闭区间 功能说明：找到传入值对应的区间（区间类型为右开左闭），返回对应值 参数：匹配值，匹配区间列表 返回：任意值 样例 12345匹配左闭区间($&#123;年龄&#125;, [[null, 20, 0], [20, 40, 80], [40, 60, 100], [60, null, 60]]) 匹配右闭区间 功能说明：找到传入值对应的区间（区间类型为右闭左开），返回对应值 参数：匹配值，匹配区间列表 返回：任意值 样例：参考匹配左闭区间 匹配闭区间 功能说明：找到传入值对应的区间（区间类型为右左都闭），返回对应值 参数：匹配值，匹配区间列表 返回：任意值 样例：参考匹配左闭区间 匹配开区间 功能说明：找到传入值对应的区间（区间类型为右左都开），返回对应值 参数：匹配值，匹配区间列表 返回：任意值 样例：参考匹配左闭区间]]></content>
      <tags>
        <tag>产品介绍</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Deepin-Ubuntu-Linux学习笔记]]></title>
    <url>%2F2017%2F12%2F12%2F2017%2Fdeepin-ubuntu-linux-learn%2F</url>
    <content type="text"><![CDATA[软件安装阿里云镜像1234#备份sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak#替换sudo sed -ni 's/packages.deepin.com\/deepin/mirrors.aliyun.com\/deepin\//p' /etc/apt/sources.list 命令行工具123456789101112131415161718192021222324#Tilix终端##installsudo apt install tilix -y##start with rootgksudo tilix &amp;#gitsudo apt install git -y#oh-my-zsh##zsh firstsudo apt install zsh -y##via curlsudo apt install curl -ysh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"##via wgetsh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"#autojumpsudo apt install autojump -yecho ". /usr/share/autojump/autojump.sh" &gt;&gt; ~/.zshrc#ssh密码工具sudo apt install sshpass -y 开发工具123456789101112131415161718192021222324252627282930313233#ideasudo apt install idea -y#vscodesudo apt install vscode -y#meldsudo apt install meld -y#nvm##To install or update nvm, you can use the install script using cURL:curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash##or Wget:wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash##The script clones the nvm repository to ~/.nvm and adds the source line to your profile (~/.bash_profile, ~/.zshrc, ~/.profile, or ~/.bashrc).export NVM_DIR="$HOME/.nvm"[ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; . "$NVM_DIR/nvm.sh" # This loads nvmnvm install stable##淘宝镜像配置npm config set registry https://registry.npm.taobao.org#bash 格式化工具##amazonaws，openconnect firstcd /usr/local/binsudo wget https://github.com/mvdan/sh/releases/download/v2.2.0/shfmt_v2.2.0_linux_amd64 -O shfmtsudo chmod +x shfmt#jd-gui ##amazonaws，openconnect firstcd ~/Desktopwget https://github.com/java-decompiler/jd-gui/releases/download/v1.4.0/jd-gui_1.4.0-0_all.debsudo dpkg -i jd-gui_1.4.0-0_all.deb 其他软件1234567891011121314#locatesudo apt install locate -ysudo mv /etc/cron.daily/locate /etc/cron.hourly#微信wine版sudo apt install deepin.com.wechat -y#openconnect##Connect to Cisco AnyConnect VPNsudo apt install openconnect -yopenconnect -c xxx.p12 -p xxpassword --servercert sha256:bbdbxxx...xxx31260 vpn.xxx.com#Chromesudo apt install google-chrome-stable -y 配置文件备份 可通过硬链接的方式，将以下配置文件映射到git仓库进行版本管理比如：ln /xxx/vscode_settings.json ~/.config/Code/User/settings.json 12#vscode~/.config/Code/User/settings.json 管理员运行 For a console program use: sudo &lt;program name&gt; If it is a GUI application use: gksudo &lt;program name&gt; 可修改/usr/share/applications和/usr/local/share/applications的快捷方式 启动脚本系统级 /etc/environment /etc/xprofile bash script executed while starting X Window System session. /etc/profile and /etc/profile.d/* /etc/&lt;bash&gt;.&lt;bash&gt;rc 作用单独bash script. This is a poor choice because it is single bash specific. 用户级~/.pam_environment ~/.xprofile ~/.profile ~/.&lt;bash&gt;rc GRUB修改配置12345#/etc/default/grub 优先 /usr/share/grub/default/grubsudo vi /etc/default/grubsudo update-grub#确认grep timeout /boot/grub/grub.cfg 启动 菜单无法显示问题SSH免密 - sshpass123export SSHPASS=$DEPLOY_PASSsshpass -e scp package.tgz $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATHsshpass -e ssh $DEPLOY_USER@$DEPLOY_HOST $DEPLOY_PATH/deploy.sh SSH保持连接配置客户端1234#/etc/ssh/ssh_configServerAliveInterval 60ServerAliveCountMax 3 服务端1234#/etc/ssh/sshd_configClientAliveInterval 60ClientAliveCountMax 3 问题列表Deepin没有声音 原因是deepin不会自动选择输入输出设备，解决方法如下： 点击任务栏上的“控制中心” 在“按制中心”中单击“声音” 点击“声音”后在弹出的界面中单击“高级设置” 在“高级设置”中单击将输出设备修改为“模拟耳机” 除此之外，如果安装了pavucontrl，这是pulse audio服务的一个控制程序， 也可以进行类似的设置。 FlashPlayer Linux 编译问题 错误信息 12Error:[NSFlexLib]: Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=gaspError:[NSFlexLib]: Compiler process is not started. 原因、解决办法：deepin的jdk默认加入了-Dawt.useSystemAAFontSettings=gasp（/etc/profile.d/java-awt-font-gasp.sh），需去除 1sudo gzip /etc/profile.d/java-awt-font-gasp.sh FlashPlayer Linux Debug问题 错误信息 12345678910111213141516171819202122java.lang.NullPointerException at flash.tools.debugger.concrete.PlayerSession.pullUpActivationObjectVariables(PlayerSession.java:1007) at flash.tools.debugger.concrete.PlayerSession.requestFrame(PlayerSession.java:984) at flash.tools.debugger.concrete.DStackContext.populate(DStackContext.java:156) at flash.tools.debugger.concrete.DStackContext.getArguments(DStackContext.java:74) at flex.tools.debugger.cli.DebugCLI.appendFrameInfo(DebugCLI.java:1202) at flex.tools.debugger.cli.DebugCLI.doInfoStack(DebugCLI.java:1167) at flex.tools.debugger.cli.DebugCLI.processLine(DebugCLI.java:6471) at flex.tools.debugger.cli.DebugCLI.process(DebugCLI.java:727) at flex.tools.debugger.cli.DebugCLI.execute(DebugCLI.java:569) at flex.tools.debugger.cli.DebugCLI.main(DebugCLI.java:374)java.lang.NullPointerException at flash.tools.debugger.concrete.PlayerSession.pullUpActivationObjectVariables(PlayerSession.java:1007) at flash.tools.debugger.concrete.PlayerSession.requestFrame(PlayerSession.java:984) at flash.tools.debugger.concrete.DStackContext.populate(DStackContext.java:156) at flash.tools.debugger.concrete.DStackContext.getArguments(DStackContext.java:74) at flex.tools.debugger.cli.DebugCLI.appendFrameInfo(DebugCLI.java:1202) at flex.tools.debugger.cli.DebugCLI.doInfoStack(DebugCLI.java:1167) at flex.tools.debugger.cli.DebugCLI.processLine(DebugCLI.java:6471) at flex.tools.debugger.cli.DebugCLI.process(DebugCLI.java:727) at flex.tools.debugger.cli.DebugCLI.execute(DebugCLI.java:569) at flex.tools.debugger.cli.DebugCLI.main(DebugCLI.java:374) 原因分析：出错时选中的debug sdk是工程sdk，是3.6，可能老的sdk和新的linux flashplayer不兼容 解决办法：在idea选中新版本的sdk做debug，这个sdk可以跟编译版本的sdk不同 在Run/Debug Configuration页面，配置“Use debugger from SDK”为4.x 讨论网址 The Flex SDK Debugger Adapter of the Flex SDK 3.6 has some bugs especially with 64-bit platforms(also Ubuntu 64-bit, times back when Adobe was also supporting Linux)This was the reason for us to allow the user to choose the Flex SDK to debug with.]]></content>
      <tags>
        <tag>linux</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spock测试框架学习笔记]]></title>
    <url>%2F2017%2F08%2F24%2F2017%2Fspock-test-learn%2F</url>
    <content type="text"><![CDATA[Spock操作符重载参数化测试 | , 分隔多个输入或输出 1false | false | -1 || , 分隔输入和输出 _ , 无返回结果 1234where: "sample image names are"pictureFile ||"screenshot.bmp" || _"IMG3434.raw" || _ STUB >>> , 添加多个返回结果，按照集合顺序返回 12reader.getCurrentReadings() &gt;&gt;&gt; [prev,current]inventory.isProductAvailable( &quot;bravia&quot;, _) &gt;&gt;&gt; true &gt;&gt; false >> , 添加单个返回结果，可以用闭包处理或抛异常 1234567isProductAvailable(&quot;bravia&quot;,1) &gt;&gt; trueinventory.isProductAvailable( &quot;bravia&quot;, _) &gt;&gt; &#123; throw new RuntimeException(&quot;critical error&quot;)&#125;shippingCalculator.findShippingCostFor( _, _) &gt;&gt; &#123; Product product, int count -&gt; 10 * count&#125; _ , 代表任何变量 12inventory.isProductAvailable(_, 1) &gt;&gt; trueinventory.isProductAvailable( _, _) &gt;&gt; true MOCK * , mock方法调用次数判断 123456789101 * control.activateAlarm()1 * creditCardSevice.sale(1200,customer)2 * inventory.isProductAvailable( _ , _) &gt;&gt; true0 * inventory._ //(no call for other method)2 * inventory.isProductAvailable(!null ,1) &gt;&gt; true2 * inventory.isProductAvailable(_ as String ,_ as Integer) &gt;&gt; true1 * creditCardSevice.sale(1550, &#123; client -&gt; client.vip == false&#125;)1 * creditCardSevice.sale( &#123;amount -&gt; amount ==basket.findOrderPrice()&#125;, &#123; client -&gt; client.vip == false&#125;) _ , 代表任何变量、方法、类 1232 * inventory.isProductAvailable( _ , _) &gt;&gt; true_ * inventory.isEmpty() &gt;&gt; false0 * _ Behavior-Testing ParadigmAvailable Spock blocks (given-when-then )( 相当于setup-stimulate-assert structure of JUnit ) 12345678910111213() &#123; given: FireEarlyWarning fireEarlyWarning =FireEarlyWarning() triggeredSensors = when: fireEarlyWarning.feedData(triggeredSensors) WarningStatus status = fireEarlyWarning.() then: !status.!status.&#125;() &#123; given: FireEarlyWarning fireEarlyWarning =FireEarlyWarning() triggeredSensors = when: fireEarlyWarning.feedData(triggeredSensors) WarningStatus status = fireEarlyWarning.() then: status.!status.&#125; Parameterized Test 相当于JUint的 @RunWith(Parameterized.class) Using data tables in the where: block 123456789101112131415161718192021222324def "Complete test of all nuclear scenarios"() &#123; given: "a nuclear reactor and sensor data" NuclearReactorMonitor nuclearReactorMonitor =new NuclearReactorMonitor() when: "we examine the sensor data" nuclearReactorMonitor.feedFireSensorData(fireSensors) nuclearReactorMonitor.feedRadiationSensorData(radiation) nuclearReactorMonitor.feedPressureInBar(pressure) NuclearReactorStatus status = nuclearReactorMonitor.getCurrentStatus() then: "we act according to safety requirements" status.alarmActive == alarm status.shutDownNeeded == shutDown status.evacuationMinutes == evacuation where: "possible nuclear incidents are:" pressure | fireSensors | radiation || alarm | shutDown | evacuation 150 | 0 | [] || false | false | -1 150 | 1 | [] || true | false | -1 150 | 3 | [] || true | true | -1 150 | 0| [110.4f ,0.3f, 0.0f] || true | true | 1 150 | 0| [45.3f ,10.3f, 47.7f]|| false | false | -1 155 | 0| [0.0f ,0.0f, 0.0f] || true | false | -1 170 | 0| [0.0f ,0.0f, 0.0f] || true | true | 3 Using data pipes for calculating input/output parameters 12345678() &#123; given: ImageNameValidator validator = ImageNameValidator() expect: validator.isValidImageExtension(pictureFile) == validPicture where: pictureFile &lt;&lt; [,, ,,] validPicture &lt;&lt; [ , , , , ]&#125; Dynamically generated parameters 123456() &#123; given: Calculator calc = Calculator() expect: calc.multiply(first,second) &lt; where: first &lt;&lt; (..) second &lt;&lt; (-..-)&#125; Parameters that stay constant 123where: "some scenarios are"first &lt;&lt; [20,34,44,67]second = -1 Parameters that depend on other parameters 123where: "some scenarios are"first &lt;&lt; [20,34,44,67]second = first * -1 Using dedicated data generators 1pictureFile &lt;&lt; new File("src/test/resources/validImageNames.txt").readLines() Writing a custom data generator 123public class InvalidNamesGen implements Iterator&lt;String&gt;&#123; ...&#125;where: "sample image names are"pictureFile &lt;&lt; new InvalidNamesGen() Using multivalued data iterators 12345678() &#123; given: ImageNameValidator validator = ImageNameValidator() expect: validator.isValidImageExtension(pictureFile) == result where: [pictureFile,result] &lt;&lt; MultiVarReader()&#125; Working with third-party data generators! Spock genesis library Mocking&amp;Stubing A stub is a fake class that comes with preprogrammed return values. It’s injected in the class under test so that you have absolute control of what’s being tested as input. A mock is a fake11 class that can be examined after the test is finished for its interactions with the class under test (for example, you can ask it whether a method was called or how many times it was called). Spock only records the interactions of mocks in the when: block (which should always contain the trigger code) stub 多次调用，返回结果内容、顺序控制 1234reader.() &gt;&gt;&gt; [prev,current]TemperatureMonitor monitor = TemperatureMonitor(reader)when: monitor.readSensor()monitor.readSensor() mock语法 123ReactorControl control = Mock(ReactorControl)then: "everything should be ok" * control.shutdownReactor()* control.activateAlarm() Combining mocks and stubs in parameterized tests 1234then: shutDown * control.shutdownReactor()alarm * control.activateAlarm()where: previousTemp | currentTemp || alarm | shutDown Spy 针对设计不良的老代码，需要做部分mock，其它部分还是运行实际代码。如果能做refactor，尽量避免使用Spy 1234and: "the auto-nuker program"SmartHardDriveNuker nuker = Spy(SmartHardDriveNuker)//只mock deleteHardDriveNow()方法nuker.deleteHardDriveNow() &gt;&gt; &#123;println "Hard disk is cleared"&#125; 动态方法重载 1234567891011121314151617def 'test save map'() &#123; given: GeneralRepository generalRepository = Mock(GeneralRepository) //1 generalRepository.saveEntity(_) &gt;&gt; &#123; Kpi kpi -&gt; println kpi return kpi &#125; KpiService kpiService = new KpiService(generalRepository: generalRepository) when: Kpi kpi = kpiService.save([kpiCode:"A01"]) then: //2 1 * generalRepository.saveEntity(_)&#125; 1和2冲突，有2的话1不起作用 Spock注解 @Subject（Marking the class under test inside a Spock test ) 123given: "an empty basket"@SubjectBasket basket = new Basket() The subject of this test is the Basket class. @Title(Describing the Spock unit test as a whole ) 1234@Title("Unit test for basket weight")class BasketWeightSpec extends spock.lang.Specification&#123; [...test methods here redacted for brevity...]&#125; @Narrative (详述) 1234567@Narrative(""" A empty basket starts with no weight. Adding products to the basket increases its weight. The weight isthen used for billing during shipping calculations. Electronic goods have always zero weight.""")@Title("Unit test for basket weight")@Subject(Basket)class BasketWeightDetailedSpec extends spock.lang.Specification&#123;[...test methods here redacted for brevity...]&#125; @Shared (Long-lived objects ) @Unroll( annotation for reporting individual test runs ) 自动分割测试案例，并通过模板维护测试名称 12345678910111213141516def "Trivial adder test"() &#123; given: "an adder" Adder adder = new Adder() when: "the add method is called for two numbers" int result = adder.add(first,second) then: "the result should be the sum of them" result ==sum where: "some scenarios are" first |second || sum 1 | 1 || 2 3 | 2 || 5 3 | -3 || 0&#125; @Stepwise ( 根据测试方法顺序执行 ) @Timeout(value = 5000, unit = TimeUnit.MILLISECONDS) 设定超时时间 @AutoCleanup(“shutdown”) 自动清理，默认调用close方法 其它功能 setupSpec setup cleanup cleanupSpec 12345678910111213141516171819202122232425class LifecycleSpec extends spock.lang.Specification&#123; def setupSpec() &#123;// println "Will run only once" &#125; def setup() &#123;// println "Will run before EACH feature" &#125; def "first feature being tested"() &#123; expect: "trivial test"// println "first feature runs" 2 == 1 +1 &#125; def "second feature being tested"() &#123; expect: "trivial test"// println "second feature runs" 5 == 3 +2 &#125; def cleanup() &#123;// println "Will run once after EACH feature" &#125; def cleanupSpec() &#123;// println "Will run once at the end" &#125; &#125; old()方法 get value in given: block,before the when: block Hamcrest matchers 1234expect: "camera should be one of them"products hasItem("camera")and: "hotdog is not one of them"products not(hasItem("hotdog"))]]></content>
      <tags>
        <tag>学习笔记</tag>
        <tag>groovy</tag>
        <tag>junit</tag>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
